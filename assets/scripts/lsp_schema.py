# generated by datamodel-codegen:
#   filename:  lsp.schema.json
#   timestamp: 2025-02-09T18:57:23+00:00

from __future__ import annotations

from typing import Any, List, Literal, NotRequired, TypedDict, Union

Model = Any


BaseTypes = Literal[
    "URI",
    "DocumentUri",
    "integer",
    "uinteger",
    "decimal",
    "RegExp",
    "string",
    "boolean",
    "null",
]


class BooleanLiteralType(TypedDict):
    """
    Represents a boolean literal type (e.g. `kind: true`).
    """

    kind: Literal["booleanLiteral"]
    value: bool


class EnumerationEntry(TypedDict):
    """
    Defines an enumeration entry.
    """

    deprecated: NotRequired[str]
    """
    Whether the enum entry is deprecated or not. If deprecated the property contains the deprecation message.
    """
    documentation: NotRequired[str]
    """
    An optional documentation.
    """
    name: str
    """
    The name of the enum item.
    """
    proposed: NotRequired[bool]
    """
    Whether this is a proposed enumeration entry. If omitted, the enumeration entry is final.
    """
    since: NotRequired[str]
    """
    Since when (release number) this enumeration entry is available. Is undefined if not known.
    """
    sinceTags: NotRequired[List[str]]
    """
    All since tags in case there was more than one tag. Is undefined if not known.
    """
    value: Union[str, float]
    """
    The value.
    """


class EnumerationType(TypedDict):
    kind: Literal["base"]
    name: Literal["string", "integer", "uinteger"]


class IntegerLiteralType(TypedDict):
    kind: Literal["integerLiteral"]
    """
    Represents an integer literal type (e.g. `kind: 1`).
    """
    value: float


class MapKeyType1(TypedDict):
    """
    Represents a type that can be used as a key in a map type. If a reference type is used then the type must either resolve to a `string` or `integer` type. (e.g. `type ChangeAnnotationIdentifier === string`).
    """

    kind: Literal["base"]
    name: Literal["URI", "DocumentUri", "string", "integer"]


MessageDirection = Literal["clientToServer", "serverToClient", "both"]


class MetaData(TypedDict):
    version: str
    """
    The protocol version.
    """


class ReferenceType(TypedDict):
    """
    Represents a reference to another type (e.g. `TextDocument`). This is either a `Structure`, a `Enumeration` or a `TypeAlias` in the same meta model.
    """

    kind: Literal["reference"]
    name: str


class StringLiteralType(TypedDict):
    """
    Represents a string literal type (e.g. `kind: 'rename'`).
    """

    kind: Literal["stringLiteral"]
    value: str


TypeKind = Literal[
    "base",
    "reference",
    "array",
    "map",
    "and",
    "or",
    "tuple",
    "literal",
    "stringLiteral",
    "integerLiteral",
    "booleanLiteral",
]


class BaseType(TypedDict):
    """
    Represents a base type like `string` or `DocumentUri`.
    """

    kind: Literal["base"]
    name: BaseTypes


class Enumeration(TypedDict):
    """
    Defines an enumeration.
    """

    deprecated: NotRequired[str]
    """
    Whether the enumeration is deprecated or not. If deprecated the property contains the deprecation message.
    """
    documentation: NotRequired[str]
    """
    An optional documentation.
    """
    name: str
    """
    The name of the enumeration.
    """
    proposed: NotRequired[bool]
    """
    Whether this is a proposed enumeration. If omitted, the enumeration is final.
    """
    since: NotRequired[str]
    """
    Since when (release number) this enumeration is available. Is undefined if not known.
    """
    sinceTags: NotRequired[List[str]]
    """
    All since tags in case there was more than one tag. Is undefined if not known.
    """
    supportsCustomValues: NotRequired[bool]
    """
    Whether the enumeration supports custom values (e.g. values which are not part of the set defined in `values`). If omitted no custom values are supported.
    """
    type: EnumerationType
    """
    The type of the elements.
    """
    values: List[EnumerationEntry]
    """
    The enum values.
    """


MapKeyType = Union[MapKeyType1, ReferenceType]


class AndType(TypedDict):
    """
    Represents an `and`type (e.g. TextDocumentParams & WorkDoneProgressParams`).
    """

    items: List[Type]
    kind: Literal["and"]


class ArrayType(TypedDict):
    """
    Represents an array type (e.g. `TextDocument[]`).
    """

    element: Type
    kind: Literal["array"]


class MapType(TypedDict):
    """
    Represents a JSON object map (e.g. `interface Map<K extends string | integer, V> { [key: K] => V; }`).
    """

    key: MapKeyType
    kind: Literal["map"]
    value: Type


class MetaModel(TypedDict):
    """
    The actual meta model.
    """

    enumerations: List[Enumeration]
    """
    The enumerations.
    """
    metaData: MetaData
    """
    Additional meta data.
    """
    notifications: List[Notification]
    """
    The notifications.
    """
    requests: List[Request]
    """
    The requests.
    """
    structures: List[Structure]
    """
    The structures.
    """
    typeAliases: List[TypeAlias]
    """
    The type aliases.
    """


class Notification(TypedDict):
    """
    Represents a LSP notification
    """

    clientCapability: NotRequired[str]
    """
    The client capability property path if any.
    """
    deprecated: NotRequired[str]
    """
    Whether the notification is deprecated or not. If deprecated the property contains the deprecation message.
    """
    documentation: NotRequired[str]
    """
    An optional documentation;
    """
    messageDirection: MessageDirection
    """
    The direction in which this notification is sent in the protocol.
    """
    method: str
    """
    The notifications's method name.
    """
    params: NotRequired[Union[Type, List[Type]]]
    """
    The parameter type(s) if any.
    """
    proposed: NotRequired[bool]
    """
    Whether this is a proposed notification. If omitted the notification is final.
    """
    registrationMethod: NotRequired[str]
    """
    Optional a dynamic registration method if it different from the notifications's method.
    """
    registrationOptions: NotRequired[Type]
    """
    Optional registration options if the notification supports dynamic registration.
    """
    serverCapability: NotRequired[str]
    """
    The server capability property path if any.
    """
    since: NotRequired[str]
    """
    Since when (release number) this notification is available. Is undefined if not known.
    """
    sinceTags: NotRequired[List[str]]
    """
    All since tags in case there was more than one tag. Is undefined if not known.
    """
    typeName: NotRequired[str]
    """
    The type name of the notifications if any.
    """


class OrType(TypedDict):
    """
    Represents an `or` type (e.g. `Location | LocationLink`).
    """

    items: List[Type]
    kind: Literal["or"]


class Property(TypedDict):
    """
    Represents an object property.
    """

    deprecated: NotRequired[str]
    """
    Whether the property is deprecated or not. If deprecated the property contains the deprecation message.
    """
    documentation: NotRequired[str]
    """
    An optional documentation.
    """
    name: str
    """
    The property name;
    """
    optional: NotRequired[bool]
    """
    Whether the property is optional. If omitted, the property is mandatory.
    """
    proposed: NotRequired[bool]
    """
    Whether this is a proposed property. If omitted, the structure is final.
    """
    since: NotRequired[str]
    """
    Since when (release number) this property is available. Is undefined if not known.
    """
    sinceTags: NotRequired[List[str]]
    """
    All since tags in case there was more than one tag. Is undefined if not known.
    """
    type: Type
    """
    The type of the property
    """


class Request(TypedDict):
    """
    Represents a LSP request
    """

    clientCapability: NotRequired[str]
    """
    The client capability property path if any.
    """
    deprecated: NotRequired[str]
    """
    Whether the request is deprecated or not. If deprecated the property contains the deprecation message.
    """
    documentation: NotRequired[str]
    """
    An optional documentation;
    """
    errorData: NotRequired[Type]
    """
    An optional error data type.
    """
    messageDirection: MessageDirection
    """
    The direction in which this request is sent in the protocol.
    """
    method: str
    """
    The request's method name.
    """
    params: NotRequired[Union[Type, List[Type]]]
    """
    The parameter type(s) if any.
    """
    partialResult: NotRequired[Type]
    """
    Optional partial result type if the request supports partial result reporting.
    """
    proposed: NotRequired[bool]
    """
    Whether this is a proposed feature. If omitted the feature is final.
    """
    registrationMethod: NotRequired[str]
    """
    Optional a dynamic registration method if it different from the request's method.
    """
    registrationOptions: NotRequired[Type]
    """
    Optional registration options if the request supports dynamic registration.
    """
    result: Type
    """
    The result type.
    """
    serverCapability: NotRequired[str]
    """
    The server capability property path if any.
    """
    since: NotRequired[str]
    """
    Since when (release number) this request is available. Is undefined if not known.
    """
    sinceTags: NotRequired[List[str]]
    """
    All since tags in case there was more than one tag. Is undefined if not known.
    """
    typeName: NotRequired[str]
    """
    The type name of the request if any.
    """


class Structure(TypedDict):
    """
    Defines the structure of an object literal.
    """

    deprecated: NotRequired[str]
    """
    Whether the structure is deprecated or not. If deprecated the property contains the deprecation message.
    """
    documentation: NotRequired[str]
    """
    An optional documentation;
    """
    extends: NotRequired[List[Type]]
    """
    Structures extended from. This structures form a polymorphic type hierarchy.
    """
    mixins: NotRequired[List[Type]]
    """
    Structures to mix in. The properties of these structures are `copied` into this structure. Mixins don't form a polymorphic type hierarchy in LSP.
    """
    name: str
    """
    The name of the structure.
    """
    properties: List[Property]
    """
    The properties.
    """
    proposed: NotRequired[bool]
    """
    Whether this is a proposed structure. If omitted, the structure is final.
    """
    since: NotRequired[str]
    """
    Since when (release number) this structure is available. Is undefined if not known.
    """
    sinceTags: NotRequired[List[str]]
    """
    All since tags in case there was more than one tag. Is undefined if not known.
    """


class StructureLiteral(TypedDict):
    """
    Defines an unnamed structure of an object literal.
    """

    deprecated: NotRequired[str]
    """
    Whether the literal is deprecated or not. If deprecated the property contains the deprecation message.
    """
    documentation: NotRequired[str]
    """
    An optional documentation.
    """
    properties: List[Property]
    """
    The properties.
    """
    proposed: NotRequired[bool]
    """
    Whether this is a proposed structure. If omitted, the structure is final.
    """
    since: NotRequired[str]
    """
    Since when (release number) this structure is available. Is undefined if not known.
    """
    sinceTags: NotRequired[List[str]]
    """
    All since tags in case there was more than one tag. Is undefined if not known.
    """


class StructureLiteralType(TypedDict):
    """
    Represents a literal structure (e.g. `property: { start: uinteger; end: uinteger; }`).
    """

    kind: Literal["literal"]
    value: StructureLiteral


class TupleType(TypedDict):
    """
    Represents a `tuple` type (e.g. `[integer, integer]`).
    """

    items: List[Type]
    kind: Literal["tuple"]


Type = Union[
    BaseType,
    ReferenceType,
    ArrayType,
    MapType,
    AndType,
    OrType,
    TupleType,
    StructureLiteralType,
    StringLiteralType,
    IntegerLiteralType,
    BooleanLiteralType,
]


class TypeAlias(TypedDict):
    """
    Defines a type alias. (e.g. `type Definition = Location | LocationLink`)
    """

    deprecated: NotRequired[str]
    """
    Whether the type alias is deprecated or not. If deprecated the property contains the deprecation message.
    """
    documentation: NotRequired[str]
    """
    An optional documentation.
    """
    name: str
    """
    The name of the type alias.
    """
    proposed: NotRequired[bool]
    """
    Whether this is a proposed type alias. If omitted, the type alias is final.
    """
    since: NotRequired[str]
    """
    Since when (release number) this structure is available. Is undefined if not known.
    """
    sinceTags: NotRequired[List[str]]
    """
    All since tags in case there was more than one tag. Is undefined if not known.
    """
    type: Type
    """
    The aliased type.
    """
